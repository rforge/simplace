\documentclass{article}
\usepackage[hyperfootnotes=false]{hyperref}
\usepackage[left=2cm,top=2.3cm]{geometry}


\newcommand{\simplace}{\textsc{Simplace}}
% \VignetteIndexEntry{Simplace}

\title{Interface to use \simplace{} from R}
\author{Gunther Krauss}
\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle

\section{Introduction}
This package provides methods to interact with the modelling framework \simplace{}\footnote{\textbf{S}\textsc{cientific} \textbf{I}\textsc{mpact assessment and} \textbf{M}\textsc{odelling}
\textbf{PL}\textsc{atform for} \textbf{A}\textsc{dvanced} \textbf{C}\textsc{rop and} \textbf{E}\textsc{cosystem management}.\\
See \href{http://www.simplace.net/}{www.simplace.net} for more information on \simplace{}}. \simplace{} is written in Java (and some parts in Scala) so one can access it from R via \texttt{rJava}. The purpose of this package is to simplify the interaction between R and \simplace, by providing functions to:
\begin{itemize}
\item initialize and configure \simplace
\item load a simulation (solution and project)
\item parameterize the simulation
\item run whole simulation or run it stepwise
\item get simulation output and convert it to formats suitable for R
\end{itemize}




\section{Installing the Simplace Framework}
For installing \simplace, please consult the webpage \href{http://www.simplace.net}{www.simplace.net}.
A brief guide to install \simplace:
\begin{itemize}
 \item If you don't have installed Java, please install an appropriate version of the (JRE or JDK) from \href{http://java.com}{java.com}
 \item Download the console mode of \simplace{} from \href{http://www.simplace.net/Joomla/index.php/download}{www.simplace.net}
 \item Unpack the zip archive to your disk. You have to unpack the whole directory \texttt{SIMPLACE} and the directory must not be renamed.
 \item Install the \texttt{simplace} package in R: \\
  \texttt{install.packages('simplace',repos=c('http://r-forge.r-project.org','http://cran.r-project.org'))}
\end{itemize}




\section{Basic Usage}
The usage of \simplace{} in R follows roughly this scheme:
\begin{itemize}
 \item init \simplace{} by providing the path to your simplace installation directory, your working directory and your outputs
 \item open a \simplace{} project form a solution (and project) file
 \item create a list of simulation parameters you want to change
 \item create and run a Simulation
 \item get the result from the simulation
 \item convert the result to a R object (\texttt{data.frame}, \texttt{list} etc.)
\end{itemize}

\section{Troubleshooting}
\begin{itemize}
\item Package \texttt{rJava} should be installed automatically with \texttt{simplace}. If not, install it manually: \\
\texttt{install.packages('rJava')}
\item Architecture of R and Java have to match. If you are using 64-bit Java, you have to use 64-bit R.
\item If you want to use the development version instead of the console mode, make sure that the projects \texttt{simplace}, \texttt{lap}, \texttt{simplacerun} and \texttt{lapclient} are in a common directory and set the installation dir to this directory.
\end{itemize}

\section{Example}
\subsection{Run the simulation}
\begin{small}
<<>>=
library(simplace)

SimplaceInstallationDir <- "D:/java/simplace/"

SimplaceWorkDir <- "D:/java/simplace/simplacerun/simulation/"
SimplaceOutputDir <-  "D:/java/simplace/simplacerun/output/"

Solution <- "D:/java/simplace/simplacerun/simulation/gk/solution/complete/Complete.sol.xml"

simplace <- initSimplace(SimplaceInstallationDir,SimplaceWorkDir,SimplaceOutputDir)

openProject(simplace, Solution)

parameter <- list()
parameter$enddate <- "31-12-1992"

sid <- createSimulation(simplace,parameter)
runSimulations(simplace)

result <- getResult(simplace,"DIAGRAM_OUT", sid);

closeProject(simplace)
@
\end{small}

After specifying the directories and the solution, the framework is initialized and the project opened. The end date of the simulation is (re)set and the simulation is run. After the run the result is retrieved.



\newpage
\subsection{Get the result and plot it}

\begin{small}
<<fig=TRUE>>=
resf <- resultToDataframe(result)

dates <- 300:730
weights <- resf[dates,
                c("TOP_LINE_Roots","TOP_LINE_Leaves","TOP_LINE_Stems","TOP_LINE_StorageOrgans")]
matplot(dates,weights,type="l",xlab="Days",ylab="Weight [g/m2]",main="Simulated Biomass")
legend(300,800,legend=c("Roots","Leaves","Stems","Storage Organs"),lty=1:4,col=1:4)
@
\end{small}

The result is converted to a dataframe. Interesting variables are extracted and then plotted.

\newpage
\subsection{Get arrays and plot them as contour plot}
\begin{small}
<<fig=TRUE>>=
resultlistexp <- resultToList(result,expand=TRUE)
water <- resultlistexp$BOTTOM_ARRAY_VolumetricWaterContent
wmat <- do.call(rbind,water)
wmatpart <- wmat[dates,]
layers <- dim(wmatpart)[2]
filled.contour(dates,-(layers:1),wmatpart[,layers:1],
               xlab="Day", ylab="Layer", main="Water content in soil",
               color.palette = function(n){rgb((n:1)/n,(n:1)/n,1)})
@
\end{small}

As the result contains an array which holds the water content for 40 layers, it is transformed to a list and the array is expanded.
\newpage

\tableofcontents

\end{document}